; sudoku solver implemented in Snek :)

; build up a board as a list of lists, and call
;   (solve-sudoku board)
; to see a result.  it will return the solved board if the board can be solved,
; or -1 otherwise

; multiple boards are already defined for you below (see board1, board2,
; board3 containing the same example boards from lecture 6, and board4
; containing an insoluble puzzle)


(begin
    (:= height length)
    (:= (width board) (length (elt-at-index board 0)))

    (:= (contains? list_ elt)
        (if (=? nil list_)
            #f
            (if (=? (car list_) elt)
                #t
                (contains? (cdr list_) elt)
            )
        )
    )

    (:= (slice list_ start stop)
        (map
            (function (i) (elt-at-index list_ i))
            (range start stop 1)
        )
    )

    (:= (list-replace list_ replace-ix elt)
        (map
            (function (i) (if (=? i replace-ix) elt (elt-at-index list_ i)))
            (range 0 (length list_) 1)
        )
    )

    (:= (empty? list_) (=? (length list_) 0))

    (:= (zip l1 l2)
        (if (empty? l1)
            (list)
            (concat
                (list (cons (car l1) (car l2)))
                (zip (cdr l1) (cdr l2))
            )
        )
    )

    (:= (subgrid-index x)
        ; this would be easier if we had floor division, but...oh well
        (if (contains? (list 0 1 2) x)
            0
            (if (contains? (list 3 4 5) x)
                1
                (if (contains? (list 6 7 8) x)
                    2
                    -1
                )
            )
        )
    )


    (:= (set-difference l1 l2)
        (filter (function (x) (not (contains? l2 x))) l1)
    )

    (:= (range start stop step)
        (if (>= start stop)
            (list)
            (concat (list start) (range (+ start step) stop step))
        )
    )
    (:= all-moves (range 1 10 1))
    (:= (valid-moves board r c)
        (set-difference
            all-moves
            (concat
                (values-in-row board r)
                (values-in-column board c)
                (values-in-subgrid board (subgrid-index r) (subgrid-index c))
            )
        )
    )

    (:= (get-value board r c) (elt-at-index (elt-at-index board r) c))

    (:= (!= x y) (not (=? x y)))
    (:= (nonzero? x) (!= x 0))
    (:= (nonzero-vals list_) (filter nonzero? list_))

    (:= (values-in-row board r)
        (nonzero-vals (elt-at-index board r))
    )
    (:= (values-in-column board c)
        (nonzero-vals (map (function (row) (elt-at-index row c)) board))
    )

    (:= (values-in-subgrid board sr sc)
        (let ((start-r (* sr 3)) (start-c (* sc 3)))
            (nonzero-vals
                (concat
                    (slice (elt-at-index board start-r) start-c (+ start-c 3))
                    (slice (elt-at-index board (+ start-r 1)) start-c (+ start-c 3))
                    (slice (elt-at-index board (+ start-r 2)) start-c (+ start-c 3))
                )
            )
        )
    )

    (:= (board-replace board r c elt)
        (map
            (function (r-ix)
                (let ((test-row (elt-at-index board r-ix)))
                    (if (=? r-ix r)
                        (list-replace test-row c elt)
                        test-row
                    )
                )
            )
            (range 0 (height board) 1)
        )
    )

    (:= (all-pairs l1 l2)
        (let ((single-term (function (e1) (map (function (e2) (cons e1 e2)) l2))))
            (reduce concat (map single-term l1) (list))
        )
    )
    (:= (get-value-cons board c) (get-value board (car c) (cdr c)))
    (:= (find-first-zero board)
        (begin
            (:= (helper vals-to-try)
                (if (empty? vals-to-try)
                    (cons -1 -1)
                    (if (=? 0 (get-value-cons board (car vals-to-try)))
                        (car vals-to-try)
                        (helper (cdr vals-to-try))
                    )
                )
            )
            (helper (all-pairs (range 0 9 1) (range 0 9 1)))
        )
    )

    (:= (solve-helper board r c vals)
        (if (empty? vals)
            -1 ; signal failure
            (let ((rec-result (solve-sudoku (board-replace board r c (car vals)))))
                (if (=? rec-result -1) ; failure?!
                    (solve-helper board r c (cdr vals))
                    rec-result
                )
            )
        )
    )

    (:= (solve-sudoku board)
        (let ((zero-ix (find-first-zero board)))
            (if (=? (car zero-ix) -1)
                board ; omg solved!
                (solve-helper board (car zero-ix) (cdr zero-ix) (valid-moves board (car zero-ix) (cdr zero-ix)))
            )
        )
    )

    (:= board1
         (list
            (list 5 1 7 6 0 0 0 3 4)
            (list 2 8 9 0 0 4 0 0 0)
            (list 3 4 6 2 0 5 0 9 0)
            (list 6 0 2 0 0 0 0 1 0)
            (list 0 3 8 0 0 6 0 4 7)
            (list 0 0 0 0 0 0 0 0 0)
            (list 0 9 0 0 0 0 0 7 8)
            (list 7 0 3 4 0 0 5 6 0)
            (list 0 0 0 0 0 0 0 0 0)
        )
    )

    (:= board2
         (list
            (list 5 1 7 6 0 0 0 3 4)
            (list 0 8 9 0 0 4 0 0 0)
            (list 3 0 6 2 0 5 0 9 0)
            (list 6 0 0 0 0 0 0 1 0)
            (list 0 3 0 0 0 6 0 4 7)
            (list 0 0 0 0 0 0 0 0 0)
            (list 0 9 0 0 0 0 0 7 8)
            (list 7 0 3 4 0 0 5 6 0)
            (list 0 0 0 0 0 0 0 0 0)
         )
    )

    (:= board3
        (list
            (list 0 0 1 0 0 9 0 0 3)
            (list 0 8 0 0 2 0 0 9 0)
            (list 9 0 0 1 0 0 8 0 0)
            (list 1 0 0 5 0 0 4 0 0)
            (list 0 7 0 0 3 0 0 5 0)
            (list 0 0 6 0 0 4 0 0 7)
            (list 0 0 8 0 0 5 0 0 6)
            (list 0 3 0 0 7 0 0 4 0)
            (list 2 0 0 3 0 0 9 0 0)
        )
    )

    (:= board4
         (list
            (list 5 1 7 6 8 0 0 3 4)
            (list 2 8 9 0 0 4 0 0 0)
            (list 3 4 6 2 0 5 0 9 0)
            (list 6 0 2 0 0 0 0 1 0)
            (list 0 3 8 0 0 6 0 4 7)
            (list 0 0 0 0 0 0 0 0 0)
            (list 0 9 0 0 0 0 0 7 8)
            (list 7 0 3 4 0 0 5 6 0)
            (list 0 0 0 0 0 0 0 0 0)
        )
    )
)
