(:= (range start stop) (if (>= start stop) nil (cons start (range (+ start 1) stop))))
(:= (all values) (if (=? (length values) 0) #t (and (car values) (all (cdr values)))))
(:= (min a b) (if (< a b) a b))
(:= (max a b) (if (> a b) a b))
(:= (zip a b) (if (or (=? (length a) 0) (=? (length b) 0)) nil (cons (cons (car a) (car b)) (zip (cdr a) (cdr b)))))
(:= (set-elt-at-index ll index value) (if (=? index 0) (cons value (cdr ll)) (cons (car ll) (set-elt-at-index (cdr ll) (- index 1) value))))
(:= (initialize-nd dimensions value) (if (=? (length dimensions) 0) value (map (function (_) (initialize-nd (cdr dimensions) value)) (range 0 (car dimensions)))))
(:= (neighbors-nd dimensions coordinates) (if (=? (length dimensions) 0) (list (list)) (reduce concat (map (function (suffix) (map (function (prefix) (concat (list prefix) suffix)) (range (max 0 (- (car coordinates) 1)) (min (car dimensions) (+ (car coordinates) 2))))) (neighbors-nd (cdr dimensions) (cdr coordinates))) (list))))
(:= (get-nd board coordinates) (if (=? (length coordinates) 1) (elt-at-index board (car coordinates)) (get-nd (elt-at-index board (car coordinates)) (cdr coordinates))))
(:= (set-nd board coordinates value) (if (=? (length coordinates) 1) (set-elt-at-index board (car coordinates) value) (set-elt-at-index board (car coordinates) (set-nd (elt-at-index board (car coordinates)) (cdr coordinates) value))))
(:= (is-victory board mask dimensions) (if (=? (length dimensions) 0) (or mask (=? board -1)) (all (map (function (pair) (is-victory (car pair) (cdr pair) (cdr dimensions))) (zip board mask)))))
(:= (game-get-state game) ((elt-at-index game 0)))
(:= (game-set-state game state) ((elt-at-index game 1) state))
(:= (game-get-board game) ((elt-at-index game 2)))
(:= (game-set-board game board) ((elt-at-index game 3) board))
(:= (game-get-mask game) ((elt-at-index game 4)))
(:= (game-set-mask game mask) ((elt-at-index game 5) mask))
(:= (game-get-dimensions game) ((elt-at-index game 6)))
(:= (new-game-nd dimensions bombs) (begin (:= state 0) (:= board (initialize-nd dimensions 0)) (:= mask (initialize-nd dimensions #f)) (:= self (list (function () state) (function (new_state) (set! state new_state)) (function () board) (function (new_board) (set! board new_board)) (function () mask) (function (new_mask) (set! mask new_mask)) (function () dimensions))) (map (function (bomb) (begin (game-set-board self (set-nd (game-get-board self) bomb -1)) (map (function (neighbor) (begin (:= value (get-nd (game-get-board self) neighbor)) (if (>= value 0) (game-set-board self (set-nd (game-get-board self) neighbor (+ value 1))) nil))) (neighbors-nd dimensions bomb)))) bombs) self))
(:= (dig-nd game coordinates) (if (or (get-nd (game-get-mask game) coordinates) (not (=? (game-get-state game) 0))) 0 (if (=? (get-nd (game-get-board game) coordinates) -1) (begin (game-set-mask game (set-nd (game-get-mask game) coordinates #t)) (game-set-state game 2) 1) (begin (:= (dig-helper coordinates) (if (get-nd (game-get-mask game) coordinates) 0 (begin (game-set-mask game (set-nd (game-get-mask game) coordinates #t)) (if (=? (get-nd (game-get-board game) coordinates) 0) (reduce + (map (function (neighbor) (dig-helper neighbor)) (neighbors-nd (game-get-dimensions game) coordinates)) 1) 1)))) (:= count (dig-helper coordinates)) (if (is-victory (game-get-board game) (game-get-mask game) (game-get-dimensions game)) (game-set-state game 1) nil) count))))
(:= game (new-game-nd (list 2 4) (list (list 0 0) (list 1 0) (list 1 1))))
(game-get-board game)
(dig-nd game (list 0 1))
(dig-nd game (list 0 3))
(game-get-board game)
(game-get-state game)
